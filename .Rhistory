door <- doorclass(x = 1)
door <- new("door", x=2)
door
# Validity function to check if door is an integer
# Uneccessary because the original SetClass specified x as numeric, so
# won't work unless x is an integer, but this is what the validity would look like
setValidity("door", function(door){
if(is.integer(door)==TRUE){
return("Valid")
}
else("Not Valid")
}
)
# Set PlayGame generic
setGeneric("PlayGame", function(x){
standardGeneric("PlayGame")
})
# Set PlayGame method
setMethod("PlayGame", c(x="door"), function(x){
if(sample(1:3, 1) == x@x) {
return("Congratulations, you win a car!")
# If the user's input for door is the same as the random sample, they win
}
else("Sorry, you picked the wrong door. You do not win a car.")
}
)
PlayGame(door)
PlayGame(door)
door <- list(1, 2, 3)
class(door) <- "door"
# Create method PlayGame that takes class door
PlayGame <- function(x){
UseMethod("PlayGame", x)
}
PlayGame.door <- function(door) {
#Set method to PlayGame, calling class "door"
#The user chooses which door, 1, 2 or 3
if(sample(1:3, 1) == door) {
return("Congratulations, you win a car!")
# If the user's input for door is the same as the random sample, they win
}
else("Sorry, you picked the wrong door. You do not win a car.")
#If the user's input for door is not the same as the random sample, they lose
}
# Test function
PlayGame.door(door=1)
door <- list(2)
class(door) <- "door"
door <- list(2)
class(door) <- "door"
# Create method PlayGame that takes class door
PlayGame <- function(x){
UseMethod("PlayGame", x)
}
PlayGame.door <- function(door) {
#Set method to PlayGame, calling class "door"
#The user chooses which door, 1, 2 or 3
if(sample(1:3, 1) == door) {
return("Congratulations, you win a car!")
# If the user's input for door is the same as the random sample, they win
}
else("Sorry, you picked the wrong door. You do not win a car.")
#If the user's input for door is not the same as the random sample, they lose
}
# Test function
PlayGame.door(door)
PlayGame.door(door)
setClass("door",
representation = representation(
x = "numeric"),
prototype = prototype(
x = c())
)
# Create object
door <- new("door", x=2)
door
setMethod("PlayGame", c(x="door"), function(x){
if(sample(1:3, 1) == x@x) {
return("Congratulations, you win a car!")
}
else("Sorry, you picked the wrong door. You do not win a car.")
}
)
# Test method PlayGame with object door
PlayGame(door)
# Problem Set 3
# Danielle Korman
# February 25 2016
rm(list=ls())
# First, with S3
# Define a new class "door"
# This assigns the object door to the number 2 (could be 1 or 3)
door <- list(2)
# Assigns the class of object door to class door
class(door) <- "door"
# Create method PlayGame in S3
PlayGame <- function(x) {
UseMethod("PlayGame", x)
}
# This function checks if a random number chosen from 1-3, which contains the car,
# matches with the user's choice of door (in this case, door 2)
# @param x The Input variable
# @param PlayGame The method used in this function
# @param door An object of class door, which is the user's choice of door (2)
# @return Either a congratulatory message if the numbers match, or a message of condolences
# @author Danielle Korman
PlayGame.door <- function(door) {
if(sample(1:3, 1) == door) {
return("Congratulations, you win a car!")
}
else("Sorry, you picked the wrong door. You do not win a car.")
}
# Test function
PlayGame.door(door)
# Now, with S4
# Create class door, where the object is numeric
setClass("door",
representation = representation(
x = "numeric"),
prototype = prototype(
x = c())
)
# Create object door of class door
door <- new("door", x=2)
door
# Validity function to check if door is an integer
# Uneccessary because the original SetClass specified x as numeric, so
# won't work unless x is an integer, but this is what the validity would look like
setValidity("door", function(door){
if(is.integer(door)==TRUE){
return("Valid")
}
else("Not Valid")
}
)
# Set PlayGame generic so that it can be used as a method
setGeneric("PlayGame", function(x){
standardGeneric("PlayGame")
})
# Set PlayGame method
# This function again uses the method PlayGame to see if a random sample of 1-3
# matches the door chosen by the user
# @param x A numeric, previously defined in object door as 2
# @param door The input, object of class door where x=2
# @return A message saying the user won a car if the numbers match, or that they
# lost if the numbers don't match
setMethod("PlayGame", c(x="door"), function(x){
if(sample(1:3, 1) == x@x) {
return("Congratulations, you win a car!")
}
else("Sorry, you picked the wrong door. You do not win a car.")
}
)
# Test method PlayGame with object door
PlayGame(door)
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
rm(list=ls())
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
sum.plus.2 <- function(x){
sum(x) + 2
}
apply(mat1, 1, sum.plus.2)
apply(mat1, 1, function(x, y) sum(x) + y, y=3)
apply(mat1, 2, function(x, y) sum(x) + y, y=5)
apply(mat1, 2)
mat1.df <- data.frame(mat1)
mat1.df
is.list(mat1.df)
lapply(mat1.df, sum)
y <- lapply(mat1.df, sum)
is.list(y)
names(y)
unlist(lapply(1:5, function(i) 5+i ))
outVec <- NULL
for(i in 1:5){
outVec <- c(outVec, 5+i)
}
outVec
y2 <- sapply(mat1.df, function(x, y) sum(x) + y, y = 5)
y2
is.vector(y2)
is.list(y2)
x1 <- runif(16)
x1
cat1 <- rep(1:4, 4)
cat1
cat2 <- c(rep(1, 8), rep(2, 8))
cat2
mat2.df <- data.frame(x1)
names(mat2.df) <- c("x1")
mat2.df$cat1 <- cat1
mat2.df$cat2 <- cat2
mat2.df
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
outVec <- NULL
for (i in unique(mat2.df$cat1)){
outVec <- c(outVec, mean(mat2.df$x1[mat2.df$cat1==i]))
}
outVec
tapply(mat2.df$x1, list(mat2.df$cat1, mat2.df$cat2), mean)
mean(mat2.df$x1[mat2.df$cat1==1 & mat2.df$cat2==1])
a <- matrix(runif(100, 1, 2),20)
a.df <- data.frame(a)
colMeans(a)
colMeans(a1)
a <- matrix(runif(100, 1, 2),20)
a.df <- data.frame(a)
#subtract column means from each column
#centering each column around mean
colMeans(a)
a1 <- sweep(a, 2, colMeans(a), "-")
a1[1:5,]
## The column means should now be zero
colMeans(a1)
colMeans(a1)
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
byOut <- by(data=mat2.df$x1, INDICES=mat2.df$cat1, mean)
str(byOut)
length(byOut)
is.list(byOut)
is.vector(byOut)
class(byOut)
l <- list(a = 1:10, b = 11:20)
l
l.fivenum <- vapply(X=l, FUN=fivenum, FUN.VALUE=c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
class(l.fivenum)
l.fivenum
replicate(10, rnorm(10))
l1 <- list(a = c(1:10), b = c(11:20))
l2 <- list(c = c(21:30), d = c(31:40))
l1
l2
mapply(sum, l1$a, l1$b, l2$c, l2$d)
l <- list(a = 1:10, b = 11:20)
rapply(l, log2)
rapply(l, log2, how = "unlist")
rapply(l, log2, how = "list")
rapply(l, log2, how = "replace")
rapply(l, mean, how="unlist")
rapply(l, mean, how = "list")
rapply(l, mean, how = "replace")
library(plyr)
install.packages(plyr)
install.packages("plyr")
dd<-data.frame(matrix(rnorm(216),72,3),c(rep("A",24),rep("B",24),rep("C",24)),c(rep("J",36),rep("K",36)))
colnames(dd) <- c("v1", "v2", "v3", "dim1", "dim2")
head(dd)
obj1 <- ddply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df) mean(df$v1))
obj1
obj2 <- daply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df)mean(df$v1))
obj2 # why are these different?
l_ply(1:100, identity)
llply(1:100, identity)
laply(1:100, identity)
ldply(1:100, identity)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
library('doMC')
install.packages("doMC")
install.packages("foreach")
library('doMC')
library('foreach')
myX <- 20
myY <- c(1:100)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
library('doMC')
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=80)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
?array
?array
?runif
?array
?array
myarray <- array(data=runif(1000*20*5), dim=c(20,5,1000))
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
?apply
apply(myarray, c(1,3), function(x), beta%*%rnorm(1))
apply(myarray, c(1,3), function(x) beta%*%rnorm(1))
Y <- apply(myarray, 3, function(x) x%*%Beta+rnorm(1))
Y
dim(Y)
?lm
??regress
?lm
?lappyly
?lapplyy
?lapply
?apply
apply(myarray, 3, function(x) lm(Y~x))
rm(list=ls())
library(Rcpp)
library(devtools)
library(roxygen2)
setwd("/Users/drk/Desktop/Rclass")
dir()
Rcpp.package.skeleton("easyEBMA", cpp_files=c("./easyEM.cpp"))
.onUnload<-function(libpath){
libary.dynam.unload("easyEBMA", libpath)
}
current.code <- as.package("easyEBMA")
load_all(current.code)
document(current.code)
help(weightedNormals)
cppFunction('double stupidSumCpp(NumericVector x) {
int n = x.size();
double total=0;
for(int i=0; i<n; ++i) {
total += x[i];
}
return total;
}')
cppFunction('double stupidSumCppIt(NumericVector x) {
double total=0;
NumericVector::iterator it;
for(it = x.begin(); it != x.end(); ++it) {
total += *it;
}
return total;
}')
library(microbenchmark)
microbenchmark(stupidSumCpp(runif(1000)), times=10000)
microbenchmark(stupidSumCppIt(runif(1000)), times=10000)
cppFunction('NumericVector weightedNormals(NumericVector x, NumericVector means, NumericVector weights, double sd){
int n = x.size();
int m = means.size();
NumericVector out(n);
for(int i=0; i<n; i++){
for(int j=0; j<m; j++){
double thisEval=R::dnorm(x[i], means[j], sd, FALSE);
out[i] +=  thisEval * weights[j];
}
}
return out;
}')
cppFunction('NumericVector weightedNormals2(NumericVector x, NumericVector means, NumericVector weights, double sd){
int n = x.size();
int m = means.size();
NumericVector out(0);
for(int i=0; i<n; i++){
double insidei = 0;
for(int j=0; j<m; j++){
insidei += R::dnorm(x[i], means[j], sd, FALSE) * weights[j];
}
out.push_back(insidei) ;
}
return out;
}')
dnorm(2, 1, 1)*.75 + dnorm(2, 0, 1)*.25
dnorm(1, 1, 1)*.75 + dnorm(1, 0, 1)*.25
weightedNormals(c(2,1), c(1,0), c(.75, .25), sd=1)
weightedNormals2(c(2,1), c(1,0), c(.75, .25), sd=1)
microbenchmark(weightedNormals(c(rep(2, 100),1), c(rep(1, 100),0), c(rep(.75, 100), .25), sd=1),  times=10000)
microbenchmark(weightedNormals2(c(rep(2, 100),1), c(rep(1, 100),0), c(rep(.75, 100), .25), sd=1), times=10000)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
#Set your working directory
#Miguel
setwd("/Users/drk/Desktop/Rclass/BAMnew")
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
library(BaM)
load("~/Desktop/Rclass/BAMnew/BaM2/data/afghan.deaths.rda")
View(afghan.deaths)
?africa
View(africa)
?cabinet.duration
View(cabinet.duration)
?child
View(child)
?coal.mining.disasters
View(coal.mining.disasters)
load_all(current.code)
document(current.code)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
current.code <- as.package("BaM2")
load_all(current.code)
document(current.code)
?SparseGrid
rm(list=ls())
library(SparseGrid)
?SparseGrid
library(parallel)
cores <- detectCores()
cores
library(doMC)
registerDoMC(4) # register number of cores
library('foreach')
?system.time
sg.int<-function(g,...,lower,upper)
{ require("SparseGrid")
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
gridss<-as.matrix(expand.grid(seq(lower[1],upper[1]-1,by=1),seq(lower[2],upper[2]-1,by=1)))
sp.grid <- createIntegrationGrid( 'KPU', dimension=3, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss))
{
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
gx.sp <- apply(nodes, 1, g,...)
val.sp <- gx.sp %*%weights
val.sp
}
system.time(out2 <- laply(sg.int, .parallel=TRUE))
?laply
library(plyr)
system.time(out2 <- laply(sg.int, .parallel=TRUE))
sg.int<-function(g,...,lower,upper)
{ require("SparseGrid")
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
gridss<-as.matrix(expand.grid(seq(lower[1],upper[1]-1,by=1),seq(lower[2],upper[2]-1,by=1)))
sp.grid <- createIntegrationGrid( 'KPU', dimension=5, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss))
{
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
gx.sp <- apply(nodes, 1, g,...)
val.sp <- gx.sp %*%weights
val.sp
}
system.time(out2 <- laply(sg.int, .parallel=TRUE))
?require
?require
sg.int<-function(g, dimension, lower, upper)
{ require("SparseGrid")
require("plyr")
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
gridss<-as.matrix(expand.grid(seq(lower[1],upper[1]-1,by=1),seq(lower[2],upper[2]-1,by=1)))
sp.grid <- createIntegrationGrid( 'KPU', dimension, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss))
{
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
gx.sp <- apply(nodes, 1, g,...)
val.sp <- gx.sp %*%weights
val.sp
system.time(out2 <- laply(sg.int, .parallel=TRUE))
}
?testthat
??testthat
install.packages("testthat")
library("testthat")
sg.int<-function(g, dimension, lower, upper)
{ require("SparseGrid")
require("plyr")
require("testthat")
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
gridss<-as.matrix(expand.grid(seq(lower[1],upper[1]-1,by=1),seq(lower[2],upper[2]-1,by=1)))
sp.grid <- createIntegrationGrid( 'KPU', dimension, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss))
{
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
gx.sp <- apply(nodes, 1, g,...)
val.sp <- gx.sp %*%weights
val.sp
system.time(out2 <- laply(sg.int, .parallel=TRUE))
}
